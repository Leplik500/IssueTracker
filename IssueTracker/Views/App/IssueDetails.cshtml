@using System.Text.RegularExpressions
@using System.Text.Json
@using System.Net.Http
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using IssueTracker.Domain.ViewModels.Issue
@using IssueTracker.Domain.Response
@using System.Text
@model IssueTracker.Domain.ViewModels.Issue.IssueViewModel

<style>
p{
    margin-top: 0;
    padding-top: 0;
    margin-bottom: 0;
    padding-bottom: 0;
}
</style>
<div class="container">
    <div class="issue-header">
        <h1 class="issue-title">@Model.Title</h1>
        <button class="close-modal">&times;</button>
        <div class="issue-meta">
            <div class="issue-meta-item">
                <span class="issue-meta-label">State: @Model.Status</span>
            </div>
            <div class="issue-meta-item">
                <span class="issue-meta-label">
                    Labels: @string.Join(", ",
                                Model.Tags)
                </span>
            </div>
            <div class="issue-meta-item">
                <span class="issue-meta-label">Created: @Model.Created</span>
            </div>
        </div>
    </div>
    <div class="issue-body">
        <p>@Model.Description</p>
    </div>
    <div class="issue-comments">
        @{
            var regex = ":([a-z_]+):";
        }
        @foreach (var comment in Model.Comments){
            var stringBuilder = new StringBuilder(comment);
            var matches = Regex.Matches(comment, regex);
            foreach (Match match in matches){
                var replace = match
                    .Value
                    .Replace(":", "")
                    .Replace("_", " ");
                using var client = new HttpClient();
                var request = new HttpRequestMessage(
                    HttpMethod.Get,
                    $"https://api.api-ninjas.com/v1/emoji?name={replace}");
                request.Headers.Add("X-Api-Key", "yz2RIBcZ/VEWQViuds439g==tlunRhKQ6C5vSpzv");
                using var response = await client.SendAsync(request);
                response.EnsureSuccessStatusCode();
                if (response.Content.Headers.ContentType?.MediaType == "application/json"){
                    var options = new JsonSerializerOptions {PropertyNameCaseInsensitive = true};
                    var emoji = JsonSerializer
                        .Deserialize<EmojiResponse[]>(response
                            .Content.ReadAsStringAsync().Result,
                            options)?[0].character;

                    stringBuilder.Replace(match.Value, emoji);
                }
            }
            if (matches.Count == 0){
                <div class="issue-comment">
                    <p>@comment</p>
                </div>
            }
            else if (matches.Count > 0){
                <div class="issue-comment">
                    <p>@stringBuilder</p>
                </div>
            }

        }
    </div>
    <form action="#"
          id="commentForm">
        <input id="issueId"
               type="hidden"
               value="@Model.Id">
        <div class="form-group">
            <label for="commentInput">Add a comment:</label>
            <input class="form-control"
                   id="commentInput"
                   placeholder="Enter your comment"
                   type="text">
        </div>
        <button id="addComment">
            Add Comment
        </button>
    </form>
</div>
<script src="~/js/issueDetails.js"></script>